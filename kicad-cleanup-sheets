#!/usr/bin/python
"""
Finds unused references in the project, allowing unnecessary/erroneous "fix-refs"

MUST be run before `kicad-fix-refs`

Algorithm:

* open every schema one by one.
* find all references
* walk on that path starting from project schema to see if it really exists

Example output:

    --- Examining digital-input.sch
    Project schema: Found R5 in input-1 (instance of digital-input.sch)
    Project schema: Found R6 in input-2 (instance of digital-input.sch)
    Project schema: Found C8 in input-1 (instance of digital-input.sch)
    Project schema: Found C9 in input-2 (instance of digital-input.sch)
    --- Examining led-layer.sch
    --- Examining led-driver.sch
    Project schema: Found R28 in front-leds (instance of led-layer.sch)
    Project schema: Found R11 in front-leds (instance of led-layer.sch)
    Project schema: Found R13 in front-leds (instance of led-layer.sch)
    Project schema: Found R24 in front-leds (instance of led-layer.sch)
    Project schema: Found R25 in front-leds (instance of led-layer.sch)
    Project schema: Found R26 in front-leds (instance of led-layer.sch)
    Project schema: Found R27 in front-leds (instance of led-layer.sch)
    Project schema: Found R29 in front-leds (instance of led-layer.sch)
    Project schema: Found R30 in front-leds (instance of led-layer.sch)
    Project schema: Found R31 in front-leds (instance of led-layer.sch)
    Project schema: Found R32 in front-leds (instance of led-layer.sch)
    Project schema: Found R43 in mb_reset (instance of led-driver.sch)
    Project schema: Found R35 in front-leds (instance of led-layer.sch)
    Project schema: Found Q10 in front-leds (instance of led-layer.sch)
    Project schema: Found Q4 in front-leds (instance of led-layer.sch)
    Project schema: Found Q5 in front-leds (instance of led-layer.sch)

"""

import sys, re
import argparse


if len(sys.argv) > 1:
    project_name = sys.argv[1]
else:
    print "Project name is missing."
    exit()


write_to_file = False
if len(sys.argv) > 2 and sys.argv[2] == "--write":
    print "*** Writing to file..."
    write_to_file = True

if write_to_file:
    ans = raw_input("Did you close the Schematic Editor? [y/n] ")
    if ans != "y":
        print "Schematic Editor should be closed before running this."
        exit()

import glob, os
#os.chdir("/mydir")
all_clean = True

for filename in glob.glob("*.sch"):
    if filename.startswith('_'):
        continue
    print "--- Examining {0}".format(filename)
    with open(filename, 'r+b') as f:
        lines = []
        widlist = []
        pattern = re.compile('(^AR Path="/)([A-Z0-9/]+)(" )(Ref=")([A-Z]+[0-9]+)(".*)')
        for line in f:
            ref = pattern.search(line)
            if ref:
                path = ref.group(2)
                reference = ref.group(5)
                #print "detected reference: ", path
                paths = path.split('/')
                #
                # Walk on the paths
                instance_found = False
                with open(project_name + '.sch', 'r') as p:
                    for pline in p:
                        # search for this path in project schema
                        if pline == "U {0}\n".format(paths[0]):
                            # next line is instance name 
                            instance_name = re.search('[^"]+"([^"]+).*', p.next()).group(1)
                            # next line is class name (.sch file name)
                            class_name    = re.search('[^"]+"([^"]+).*', p.next()).group(1)
                            print "\t\tINFO: Project schema: Found {1} in {2} (instance of {3})".format(
                                paths[0], reference, instance_name, class_name)
                            instance_found = True
                if instance_found:
                    lines.append(line)
                else:
                    sys.stdout.write("This instance is not found: " + line)
                    all_clean = False
            else:
                # some other line, just append
                lines.append(line)

        new_content = ''.join(lines)

        if write_to_file:
            f.seek(0)
            f.write(new_content)
            f.truncate()

if all_clean:
    print
    print "----------------------------------------------"
    print "All clean. Nothing to do here."
    print "----------------------------------------------"
    print

if not all_clean and not write_to_file:
    print "**** This was a dry run, use with '--write' parameter to write to the file."
